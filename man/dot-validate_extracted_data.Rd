% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parsing_validation.R
\name{.validate_extracted_data}
\alias{.validate_extracted_data}
\title{Validate extracted data against a schema definition (list format).}
\usage{
.validate_extracted_data(extracted_data, schema)
}
\arguments{
\item{extracted_data}{The list/data frame structure returned by \code{ellmer::extract_data}.}

\item{schema}{The schema definition as an R list, typically loaded from YAML
using a function like \code{get_schema}.}
}
\value{
A list of validation error messages. An empty list indicates successful
validation. Each error message includes the path to the problematic node.
}
\description{
Checks if the structure, types, and required fields of the extracted data
conform to the rules defined in the schema list (parsed from YAML).
}
\examples{
\dontrun{
# Assume schema_list is loaded from YAML using get_schema()
# Assume llm_output is the result from chat$extract_data(..., type = ellmer_schema)

schema_definition <- get_schema(".") # Or path to your schema YAML
# llm_output <- chat$extract_data(...) # Run your extraction

validation_errors <- validate_extracted_data(llm_output, schema_definition)

if (length(validation_errors) == 0) {
  print("Validation successful!")
} else {
  print("Validation failed with the following errors:")
  purrr::walk(validation_errors, print) # Requires purrr package
  # Or use base R:
  # invisible(lapply(validation_errors, print))
}
}
}
